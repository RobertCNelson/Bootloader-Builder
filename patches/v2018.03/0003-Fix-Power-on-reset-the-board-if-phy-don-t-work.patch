From f42bfdf81f18c960545b2f7fb98c4983c7d10a57 Mon Sep 17 00:00:00 2001
From: "Peter.Yang" <turmary@126.com>
Date: Tue, 8 May 2018 10:41:17 +0800
Subject: [PATCH]  Fix: Power-on reset the board if phy don't work

---
 arch/arm/include/asm/davinci_rtc.h |  19 ++++++
 board/ti/am335x/board.c            |  61 +++++++++++++++++
 configs/am335x_evm_defconfig       |   2 +
 drivers/net/cpsw.c                 |  13 ++++
 drivers/rtc/Kconfig                |   5 ++
 drivers/rtc/davinci.c              | 130 ++++++++++++++++++++++++++++++++++++-
 include/configs/am335x_evm.h       |   4 ++
 include/power/tps65217.h           |   4 ++
 8 files changed, 236 insertions(+), 2 deletions(-)

diff --git a/arch/arm/include/asm/davinci_rtc.h b/arch/arm/include/asm/davinci_rtc.h
index 575b590..8299874 100644
--- a/arch/arm/include/asm/davinci_rtc.h
+++ b/arch/arm/include/asm/davinci_rtc.h
@@ -31,6 +31,8 @@ struct davinci_rtc {
 	unsigned int	alarmyear;
 	unsigned int	resv2[2];
 	unsigned int	ctrl; /* 0x40 */
+	#define RTC_STATUS_ALARM2_MASK		0x80
+	#define RTC_STATUS_ALARM_MASK		0x40
 	unsigned int	status;
 	unsigned int	irq;
 	unsigned int	complsb;
@@ -42,6 +44,20 @@ struct davinci_rtc {
 	unsigned int	scratch2;
 	unsigned int	kick0r;
 	unsigned int	kick1r; /* 0x70 */
+
+	/* am335x specific */
+	unsigned int	revision;
+	unsigned int	sysconfig;
+	unsigned int	irqwakeen;
+	unsigned int	alarm2second; /* 0x80 */
+	unsigned int	alarm2minute;
+	unsigned int	alarm2hour;
+	unsigned int	alarm2day;
+	unsigned int	alarm2month; /* 0x90 */
+	unsigned int	alarm2year;
+	#define RTC_PMIC_PWR_ENABLE_EN_MASK	0x10000
+	unsigned int	pmic;
+	unsigned int	debounce;
 };
 
 #define RTC_STATE_BUSY	0x01
@@ -49,4 +65,7 @@ struct davinci_rtc {
 
 #define RTC_KICK0R_WE	0x83e70b13
 #define RTC_KICK1R_WE	0x95a4f1e0
+
+int rtcss_pmic_sleep(int off_secs, int on_secs);
+
 #endif
diff --git a/board/ti/am335x/board.c b/board/ti/am335x/board.c
index b39656a..fd04b17 100644
--- a/board/ti/am335x/board.c
+++ b/board/ti/am335x/board.c
@@ -23,6 +23,7 @@
 #include <asm/arch/mmc_host_def.h>
 #include <asm/arch/sys_proto.h>
 #include <asm/arch/mem.h>
+#include <asm/arch/mux.h>
 #include <asm/io.h>
 #include <asm/emif.h>
 #include <asm/gpio.h>
@@ -1202,6 +1203,28 @@ int board_init(void)
 		udelay(2);	/* PHY datasheet states 1uS min. */
 		gpio_set_value(GPIO_PHY_RESET, 1);
 	}
+
+	{
+	static const int PGDLY[] = { 20, 100, 200, 400, /* ms */};
+	uchar v;
+
+	if (tps65217_reg_read(TPS65217_DEFPG, &v)) {
+		puts("tps65217_reg_read DEFPG failure\n");
+		return 0;
+	}
+
+	printf("TPS65217: PGDLY %d ms ->", PGDLY[v & TPS65217_DEFPG_PGDLY_MASK]);
+
+	v = (v & ~TPS65217_DEFPG_PGDLY_MASK) | 0x03;
+	if (tps65217_reg_write(TPS65217_PROT_LEVEL_1,
+			       TPS65217_DEFPG,
+			       v,
+			       TPS65217_DEFPG_PGDLY_MASK))
+		puts("tps65217_reg_write DEFPG failure\n");
+
+	printf(" %d ms\n", PGDLY[v & TPS65217_DEFPG_PGDLY_MASK]);
+	}
+
 #endif
 
 	return 0;
@@ -1426,6 +1449,44 @@ int board_eth_init(bd_t *bis)
 		else
 			n += rv;
 	}
+
+	/*
+	 *  Power-on reset the board if phy don't work
+	 */
+	if (!board_is_pb()
+	   && (board_is_bone()
+	      || (board_is_bone_lt() && !board_is_bone_lt_enhanced() && !board_is_m10a())
+	      || board_is_idk()
+	      || board_is_beaglelogic()
+	      )
+	) {
+
+		struct phy_device *phy;
+		const char *devname;
+		unsigned short v;
+		int r;
+
+		devname = miiphy_get_current_dev();
+		phy = mdio_phydev_for_ethname(devname);
+
+		if (phy != NULL && (phy->phy_id & 0xffff0) == 0x0007c0f0) {
+			/* LAN8710 Special Modes */
+			r = miiphy_read(devname, phy->addr, 18, &v);
+			if (!r && (v & (0x1 << 14))) {
+				printf("PHY: %s not in MII mode\n", phy->drv->name);
+
+				/* for some boards can't sleep, delay is needed here */
+				mdelay(1000);
+
+				/*
+				 * Power On reset the board through a RTC controlled PMIC sleep & wakeup.
+				 * Actually the board/PMIC will off then on
+				 */
+				rtcss_pmic_sleep(2, 2);
+				mdelay(2500);
+			}
+		}
+	}
 #endif
 
 	/*
diff --git a/configs/am335x_evm_defconfig b/configs/am335x_evm_defconfig
index e600752..9858363 100644
--- a/configs/am335x_evm_defconfig
+++ b/configs/am335x_evm_defconfig
@@ -51,3 +51,5 @@ CONFIG_FS_BTRFS=y
 CONFIG_LZO=y
 CONFIG_OF_LIBFDT=y
 CONFIG_OF_LIBFDT_OVERLAY=y
+CONFIG_CMD_DATE=y
+CONFIG_RTC_DAVINCI=y
diff --git a/drivers/net/cpsw.c b/drivers/net/cpsw.c
index b72258f..94b720f 100644
--- a/drivers/net/cpsw.c
+++ b/drivers/net/cpsw.c
@@ -977,12 +977,25 @@ static int cpsw_phy_init(struct cpsw_priv *priv, struct cpsw_slave *slave)
 {
 	struct phy_device *phydev;
 	u32 supported = PHY_GBIT_FEATURES;
+	int old_addr, i;
 
 	phydev = phy_connect(priv->bus,
 			slave->data->phy_addr,
 			priv->dev,
 			slave->data->phy_if);
 
+	old_addr = slave->data->phy_addr;
+	for (i = 0; !phydev && i < PHY_MAX_ADDR; i++) {
+		if (i == old_addr)
+			continue;
+
+		slave->data->phy_addr = i;
+		phydev = phy_connect(priv->bus,
+				slave->data->phy_addr,
+				priv->dev,
+				slave->data->phy_if);
+	}
+
 	if (!phydev)
 		return -1;
 
diff --git a/drivers/rtc/Kconfig b/drivers/rtc/Kconfig
index 95ac031..c071882 100644
--- a/drivers/rtc/Kconfig
+++ b/drivers/rtc/Kconfig
@@ -42,4 +42,9 @@ config RTC_S35392A
 	help
 	  Enable s35392a driver which provides rtc get and set function.
 
+config RTC_DAVINCI
+	bool "Enable Davinci RTC driver"
+	help
+	  Support for Texas Davinci RTC and compatible Real Time Clock devices.
+
 endmenu
diff --git a/drivers/rtc/davinci.c b/drivers/rtc/davinci.c
index f862e2f..3321d48 100644
--- a/drivers/rtc/davinci.c
+++ b/drivers/rtc/davinci.c
@@ -9,9 +9,14 @@
 #include <rtc.h>
 #include <asm/io.h>
 #include <asm/davinci_rtc.h>
+#include <dm.h>
 
 #if defined(CONFIG_CMD_DATE)
+#if defined(CONFIG_DM_RTC)
+int davinci_rtc_get(struct udevice *dev, struct rtc_time *tmp)
+#else
 int rtc_get(struct rtc_time *tmp)
+#endif
 {
 	struct davinci_rtc *rtc = (struct davinci_rtc *)DAVINCI_RTC_BASE;
 	unsigned long sec, min, hour, mday, wday, mon_cent, year;
@@ -22,8 +27,9 @@ int rtc_get(struct rtc_time *tmp)
 		printf("RTC doesn't run\n");
 		return -1;
 	}
-	if ((status & RTC_STATE_BUSY) == RTC_STATE_BUSY)
-		udelay(20);
+	while (((status = readl(&rtc->status)) & RTC_STATE_BUSY) == RTC_STATE_BUSY) {
+		udelay(1);
+	}
 
 	sec	= readl(&rtc->second);
 	min	= readl(&rtc->minutes);
@@ -55,13 +61,27 @@ int rtc_get(struct rtc_time *tmp)
 	return 0;
 }
 
+#if defined(CONFIG_DM_RTC)
+int davinci_rtc_set(struct udevice *dev, const struct rtc_time *tmp)
+#else
 int rtc_set(struct rtc_time *tmp)
+#endif
+
 {
 	struct davinci_rtc *rtc = (struct davinci_rtc *)DAVINCI_RTC_BASE;
+	unsigned status;
 
 	debug("Set DATE: %4d-%02d-%02d (wday=%d)  TIME: %2d:%02d:%02d\n",
 		tmp->tm_year, tmp->tm_mon, tmp->tm_mday, tmp->tm_wday,
 		tmp->tm_hour, tmp->tm_min, tmp->tm_sec);
+
+	status = readl(&rtc->status);
+	if ((status & RTC_STATE_RUN) == RTC_STATE_RUN) {
+		while (((status = readl(&rtc->status)) & RTC_STATE_BUSY) == RTC_STATE_BUSY) {
+			udelay(1);
+		}
+	}
+
 	writel(bin2bcd(tmp->tm_year % 100), &rtc->year);
 	writel(bin2bcd(tmp->tm_mon), &rtc->month);
 
@@ -73,11 +93,117 @@ int rtc_set(struct rtc_time *tmp)
 	return 0;
 }
 
+#if defined(CONFIG_DM_RTC)
+int davinci_rtc_reset(struct udevice *dev)
+#else
 void rtc_reset(void)
+#endif
 {
 	struct davinci_rtc *rtc = (struct davinci_rtc *)DAVINCI_RTC_BASE;
 
 	/* run RTC counter */
 	writel(0x01, &rtc->ctrl);
+	return;
+}
+
+/*
+ * rtcss_pmic_go()
+ * Power off(sleep) PMIC after    arg:off_secs seconds.
+ * Then power on(wake) PMIC after arg:on_secs seconds.
+ */
+static int rtcss_alarm(uint32_t* base, const struct rtc_time *tmp) {
+	struct davinci_rtc *rtc = (struct davinci_rtc *)DAVINCI_RTC_BASE;
+	unsigned status;
+
+	status = readl(&rtc->status);
+	if ((status & RTC_STATE_RUN) == RTC_STATE_RUN) {
+		while (((status = readl(&rtc->status)) & RTC_STATE_BUSY) == RTC_STATE_BUSY) {
+			udelay(1);
+		}
+	}
+
+	writel(bin2bcd(tmp->tm_year % 100), &base[5]);
+	writel(bin2bcd(tmp->tm_mon),  &base[4]);
+	writel(bin2bcd(tmp->tm_mday), &base[3]);
+	writel(bin2bcd(tmp->tm_hour), &base[2]);
+	writel(bin2bcd(tmp->tm_min),  &base[1]);
+	writel(bin2bcd(tmp->tm_sec),  &base[0]);
+	return 0;
+}
+int rtcss_pmic_sleep(int off_secs, int on_secs) {
+	struct davinci_rtc *rtc = (struct davinci_rtc *)DAVINCI_RTC_BASE;
+	static struct rtc_time default_tm = { 0, 0, 0, 1, 1, 2000, 6, 0, 0 };
+	struct rtc_time rtm[1];
+	unsigned v, status;
+	time_t tm;
+
+	status = readl(&rtc->status);
+	if ((status & RTC_STATE_RUN) != RTC_STATE_RUN) {
+		/* run RTC counter */
+		writel(0x01, &rtc->ctrl);
+		/* default time */
+		rtc_set(&default_tm);
+		mdelay(10);
+	}
+
+	/* clear PWR_ENABLE_EN */
+	v = readl(&rtc->pmic);
+	v &= ~RTC_PMIC_PWR_ENABLE_EN_MASK;
+	writel(v, &rtc->pmic);
+
+	/* clear ALARM2 & ALARM status */
+	v = readl(&rtc->status);
+	v |= RTC_STATUS_ALARM2_MASK | RTC_STATUS_ALARM_MASK;
+	writel(v, &rtc->status);
+
+	/* set ALARM & ALARM2 time */
+	rtc_get(rtm);
+	tm = rtc_mktime(rtm);
+
+	tm += off_secs;
+	rtc_to_tm(tm, rtm);
+	rtcss_alarm((uint32_t*)&rtc->alarm2second, rtm);
+
+	tm += on_secs;
+	rtc_to_tm(tm, rtm);
+	rtcss_alarm((uint32_t*)&rtc->alarmsecond, rtm);
+
+	/* set PWR_ENABLE_EN */
+	v = readl(&rtc->pmic);
+	debug("RTC: PMIC REG = 0x%08x\n", v);
+	v |= RTC_PMIC_PWR_ENABLE_EN_MASK;
+	writel(v, &rtc->pmic);
+
+	/* set ALARM2 & ALARM event */
+	v = readl(&rtc->irq);
+	v |= (0x1 << 4) | (0x1 << 3);
+	writel(v, &rtc->irq);
+
+	printf("RTC: PMIC will sleep after %d secs\n"
+	       "         Then wakeup after %d secs\n\n", off_secs, on_secs);
+
+	return 0;
 }
+
+#if defined(CONFIG_DM_RTC)
+static const struct rtc_ops davinci_rtc_ops = {
+	.get = davinci_rtc_get,
+	.set = davinci_rtc_set,
+	.reset = davinci_rtc_reset,
+};
+
+static const struct udevice_id davinci_rtc_ids[] = {
+	{.compatible = "ti,am3352-rtc", .data = 0 },
+	{.compatible = "ti,da830-rtc",  .data = 1 },
+	{ },
+};
+
+U_BOOT_DRIVER(rtc_pcf2127) = {
+	.name	= "rtc-davinci",
+	.id	= UCLASS_RTC,
+	.of_match = davinci_rtc_ids,
+	.ops	= &davinci_rtc_ops,
+};
+#endif
+
 #endif
diff --git a/include/configs/am335x_evm.h b/include/configs/am335x_evm.h
index 5582a66..4a993c4 100644
--- a/include/configs/am335x_evm.h
+++ b/include/configs/am335x_evm.h
@@ -421,4 +421,8 @@
 #define CLK_SYNTHESIZER_I2C_ADDR 0x65
 #endif
 
+#ifdef CONFIG_CMD_DATE
+#define DAVINCI_RTC_BASE		CONFIG_SYS_BOOTCOUNT_ADDR
+#endif
+
 #endif	/* ! __CONFIG_AM335X_EVM_H */
diff --git a/include/power/tps65217.h b/include/power/tps65217.h
index cb07ea5..30a4e98 100644
--- a/include/power/tps65217.h
+++ b/include/power/tps65217.h
@@ -81,6 +81,10 @@ enum {
 #define TPS65217_PWR_SRC_USB_BITMASK		0x4
 #define TPS65217_PWR_SRC_AC_BITMASK		0x8
 
+#define TPS65217_DEFPG_LDO1PGM_MASK		0x08
+#define TPS65217_DEFPG_LDO2PGM_MASK		0x04
+#define TPS65217_DEFPG_PGDLY_MASK		0x03
+
 int tps65217_reg_read(uchar src_reg, uchar *src_val);
 int tps65217_reg_write(uchar prot_level, uchar dest_reg, uchar dest_val,
 		       uchar mask);
-- 
2.7.4

